:mod:`canPDOMonitor.can`
========================

.. py:module:: canPDOMonitor.can

.. autoapi-nested-parse::

   Group of classes for general can stuff



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   canPDOMonitor.can.Device
   canPDOMonitor.can.Frame



.. py:class:: Device(bitrate)

   Bases: :class:`abc.ABC`

   Main class for interfacing with CAN hardware.

   Specific hardware devices inherit from this.
   classes must implement _start and _stop methods
   CAN frames must be read from devices and placed into frame_queue async
   and thread safe following call to _start method

   .. attribute:: DEFAULT_QUEUE_SIZE
      :annotation: = 4000

      

   .. method:: start(self)

      To be called externally, calls _start method of class

      Clears the frame queue
      then calls the device-specific _start method


      Returns
      -------
      None.


   .. method:: stop(self)

      To be called externally, calls _stop method of class

      Calls the device specific _stop method
      Doesn't clear queue in case messages still need processing

      Returns
      -------
      None.


   .. method:: get_frame(self)

      Gets the next frame from the queue, blocking execution

      Should be regularly called by whatever process is reciveing the frames
      returns None when can device has been stopped

      Returns
      -------
      frame : Frame
          The next CAN frame from the fifo queue
          None is passed to queue when stopped called


   .. method:: clear_queue(self)

      Safely empties the queue

      This will not work well if the CAN device is still running

      Returns
      -------
      None.


   .. method:: _start(self)
      :abstractmethod:

      Activates the bus, clears the queue/buffer, starts populating queue

      Is responsible for reading messages on bus and passing frames
      to queue.  This is specific to hardware, using callbacks, asyncio etc

      Returns
      -------
      None.


   .. method:: _stop(self)
      :abstractmethod:

      Exits the bus and clears the queue, stop adding frames to queue

      Returns
      -------
      None.


   .. method:: _add_to_queue(self, frame)

      Called to add a frame to the queue

      Method adds frame to queue whilst checking for overflow etc

      Parameters
      ----------
      frame : Frame
          Item of Frame class from CAN device

      Returns
      -------
      None.



.. py:class:: Frame(id=0, timestamp=0, dlc=8, error=False)

   Class to hold frame information

   Properties:
       id = decimal representation of can frame id
       data = byte array length 8
       timestamp = timestamp in ms
       dlc = length of data
       error = true if frame is error frame


.. py:exception:: FrameQueueOverflowError

   Bases: :class:`Exception`

   Common base class for all non-exit exceptions.


